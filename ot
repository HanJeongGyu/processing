### **프로세싱 소프트웨어와 프로그래밍 언어**

- 프로그래밍 언어 선택에 제한은 없으며, 프로세싱은 화면상 도형, 이미지 그리기에 초점
- 프로세싱의 성능 최적화를 위해 고사양 컴퓨터 대신 프로그래밍 스킬로 해결하는 것이 중요

### **프로그래밍 최적화: 프로세싱과 오픈프레임웍스 활용**

- 프로그래밍 스킬 향상으로 최적화, 프레임워크 활용
- 오픈프레임웍스는 프로세싱과 비슷한 언어 체계, 전환은 비교적 쉬움
- **퍼포먼스 개선**을 위해 프로젝트 오픈프레임웍스(OpenFrameworks)로 전환하여 성공

오픈프레임웍스

1. **멀티미디어 지원**: 비디오, 사운드, 이미지 파일 처리가 가능하다
2. **하드웨어 상호작용**: 다양한 외부 디바이스와의 인터페이스를 지원한다
3. **플랫폼 독립성**: Windows, macOS, Linux 등 다양한 운영 체제에서 사용할 수 있다

### **리눅스 OS: 오픈 소스의 장점과 라이브러리 활용**

![스크린샷 2024-04-16 205710.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f7fd82f4-8856-4356-912c-c23ab6300575/0129fea9-9714-4dea-a92b-ab89a7dddd56/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7_2024-04-16_205710.png)

- 리눅스는 오픈 소스로, 코드를 서로 공유하고 무료로 사용 가능한 OS
- 오픈 소스 방식으로 소프트웨어를 개선하며, 사용자들끼리 코드를 공유하여 선순환 구조 형성하고 프로세싱에서는 라이브러리가 많이 활용되며, 추가 기능을 위해 다양한 무료 소프트웨어 활용 가능

소프트웨어 라이브러리를 활용하여 필요한 기능 찾아 사용하며, 대부분 개발에 필요한 라이브러리가 이미 존재한다

### **프로세싱 다운로드 및 설치 방법 (윈도우)**

- 프로세싱은 오픈소스이며 강점과 처리 소프트웨어로 인해 이십 년 간 널리 사용되었다
- 프로세싱을 실행하면 '웰컴투 프로세싱' 창이 뜨며, 코드를 작성하고 저장하면 '프로세싱' 폴더에 저장되어 관리할 수 있다
- 윈도우에서의 설치는 비슷하게 processing.org 사이트에서 윈도용 64비트 버전을 다운로드하여 설치합니다. 압축을 푼 후 '프로세싱' 폴더를 통해 코드를 관리할 수 있다

### **프로세싱 소프트웨어 설치 및 화면 기본 개념 소개**

- 프로세싱 소프트웨어 설치는 간단하게 다운로드하고 실행하여 사용 가능함
- 프로세싱은 화면을 그리는 것에 초점을 맞춘 소프트웨어로, 선, 점, 도형을 그리는 명령어가 사용됨
- 컴퓨터 그래프에서 x, y축의 좌표 체계를 이해해야 그림을 그릴 수 있으며, x축은 오른쪽으로, y축은 위쪽으로 증가함
- 수학 그래프에서 중심축이 0,0일 때, 위쪽과 오른쪽은 양수, 아래쪽과 왼쪽은 음수임

### **컴퓨터 그래픽에서의 픽셀과 좌표**

![스크린샷 2024-04-16 205848.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f7fd82f4-8856-4356-912c-c23ab6300575/cdd3e5d0-5adf-4f9b-8963-a634bc369c6b/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7_2024-04-16_205848.png)

1. 컴퓨터 그래픽에서의 좌표는 화면 좌측 상단에 픽셀 0, 수학에서의 중심점과 유사하며, 프로세싱에서 좌측 상단이 0,0으로 기준이 된다
2. 화면을 확대하면 픽셀의 정사각형 구조가 보이며, 픽셀 값은 고해상도 모니터에서 다소 차이가 날 수 있다
3. 픽셀 좌표는 좌측 상단 0,0을 기준으로 x는 우측으로 증가하고 y는 아래로 증가한다. 코딩 시 이 좌표를 기억하며 프로그래밍을 한다

### **프로세싱 파일 저장 및 이동 방법**

- '프로세싱' 프로그램 저장 시 '커맨드 s' 사용 후 프로세싱 폴더 안에 동일한 이름으로 'pde' 파일로 저장됨
- 만일 파일 이동이 필요하면 폴더 전체를 이동해야 함. 파일만 복사시 '폴더 생성 요구' 있음
- 프로세싱은 프로그램 저장 시 같은 이름의 폴더와 'pde' 파일을 자동 생성함
- 이동 시 폴더를 함께 이동해야 프로그램이 정상 작동함
- 프로세싱에서 파일을 저장하면 폴더 이름과 파일이름 'pde' 파일에 일치함

### **프로그래밍 언어의 명령어와 레퍼런스**

- 프로그래밍 명령어는 각각의 매개변수에 따라 다양하게 변화한다
- 다른 언어를 배울 때 단어 뜻을 찾고 이해하는 것은 필수적이며, 이를 위해 사전이 필요하다

컴퓨터 프로그래밍 언어의 사전인 레퍼런스를 통해 사용 가능한 명령어를 확인할 수 있다

### 프로세싱 점 찍는 방법

프로세싱은 시각적 디자인과 프로그래밍을 쉽게 결합할 수 있도록 하는 개발 환경과 프로그래밍 언어를 제공한다. 점을 찍기 위해 주로 사용하는 함수는 point() 이다. 이 함수를 사용하여 캔버스 상에 한 점을 그릴 수 있다.

### point() **함수의 기본 사용법**

point() 함수는 두 개의 주요 파라미터를 받습니다. 이 두 파라미터는 점이 위치할 x 좌표와 y 좌표ㅇ

```java
point(x, y);
```

여기서 **`x`**와 **`y`**는 점의 위치를 나타내는 좌표입니다.

### 프로세싱  네모 그리는 방법

프로세싱(Processing)에서 rect(a, b, c, d) 함수는 사각형을 그리는 데 사용된다. 이 함수는 사각형의 위치와 크기를 정의하기 위해 네 개의 인수를 받는다

### **`rect()` 함수의 파라미터**

- **a**: 사각형의 x 좌표 (사각형의 왼쪽 상단 모서리의 x 위치)
- **b**: 사각형의 y 좌표 (사각형의 왼쪽 상단 모서리의 y 위치)
- **c**: 사각형의 너비
- **d**: 사각형의 높이

```java
rect(x, y, a, b);

이 코드는 **`(x, y)`** 위치에 너비가 a, 높이가 b인 사각형을 그린다.
```

프로세싱에서 원 그리는 방법 

### **ellipse(a, b, c, d); 함수의 매개변수**

- **a**: 타원의 중심 x 좌표
- **b**: 타원의 중심 y 좌표
- **c**: 타원의 너비 (가로 지름)
- **d**: 타원의 높이 (세로 지름)

### **기본 사용법**

이 코드는 (x, y)위치에 중심을 두고, 지름이 가로 a, 세로 b인 원을 그립니다. 원을 그리려면 a=b로 입력해야한다

### 선의 색 바꾸기

선의 색을 바꾸기 위해 사용하는 함수는 stroke();이다. 이 함수는 선의 색상을 설정할 때 사용되며, 색상을 지정하는 다양한 방법이 있다. 기본적으로 RGB 색상 모델을 사용하여 색상을 지정할 수 있다.

### **`stroke()` 함수 사용법**

- **stroke(gray);** : 회색조 값을 지정한다. 여기서 **`gray`**는 0(검은색)에서 255(흰색) 사이의 값이다.
- stroke(a, b, c); : RGB 색상 값을 지정한다. **`r`**, **`g`**, **`b`** 각각은 0에서 255 사이의 값을 가지며 각각 빨간색, 초록색, 파란색의 강도를 나타낸다.
- stroke(a,b,c,d); : RGBA 색상 값을 지정하여 투명도까지 제어할 수 있다. d 는 투명도(알파 채널)를 의미하며, 이 값도 0에서 255 사이의 값을 가진다. 255는 완전 불투명, 0은 완전 투명을 의미한다.

### **이진수를 이용한 색상 선택방법**

![스크린샷 2024-04-16 210819.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f7fd82f4-8856-4356-912c-c23ab6300575/68d05368-614c-42e3-9348-4b686fad513e/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7_2024-04-16_210819.png)

- 이진수에서 자영은 0과 1을 나타내며, 컴퓨터는 0에서 255 범위 내 숫자로 색상을 선택함
- 빛의 삼원색(빨강, 녹색, 파랑)을 각각 0에서 255사이의 값으로 조합하여 사용자가 원하는 색상 선택 가능
- RGB 값(빨강, 녹색, 파랑)을 입력하면 색상이 혼합되어 나타나며, 코딩으로 색상을 선택하는 것이 불편하면 '도구 메뉴'에서 직접 색상을 선택할 수 있음
- 색상 선택 시 RGB값을 조합하여 입력하면 화면에 해당 색상이 표시되는데, 이를 통해 사용자가 원하는 색상을 정확히 선택 가능

### 면에 색을 넣는 방법

면의 색을 바꾸기 위해 사용하는 함수는 fill();이다. 이 함수는 면의 색상을 설정할 때 사용되며, 색상을 지정하는 다양한 방법이 있다. 기본적으로 RGB 색상 모델을 사용하여 색상을 지정할 수 있다.

### fill() 함수의 사용법

- fill(gray) : 회색조 값을 지정한다. 여기서 `gray`는 0(검은색)에서 255(흰색) 사이의 값이다.
- fill(r, g, b): RGB 색상 값을 지정한다. `r`, `g`, `b` 각각은 0에서 255 사이의 값을 가지며 각각 빨간색, 초록색, 파란색의 강도를 나타낸다.
- fill(r, g, b, a): RGBA 색상 값을 지정하여 투명도까지 제어할 수 있다. `a`는 투명도(알파 채널)를 의미하며, 이 값도 0에서 255 사이의 값을 가진다. 255는 완전 불투명, 0은 완전 투명을 의미한다.

noFill()과 noStroke() 함수는 각각 도형의 내부 채움과 테두리(윤곽선)를 비활성화하는 데 사용됩니다. 이 함수들은 도형을 그릴 때 내부 또는 윤곽선을 생략하고자 할 때 유용합니다.

### noFill() **함수**

- **사용법**: noFill() 함수를 호출하면 그 이후에 그려지는 모든 도형은 내부가 채워지지 않습니다. 내부가 투명하게 되어 배경이나 다른 도형들이 보이게 됩니다.

### noStroke()  **함수**

- **사용법**: noStroke()  함수를 사용하면 그 이후에 그려지는 모든 도형에 윤곽선이 적용되지 않습니다. 도형의 경계가 보이지 않게 되므로, 오직 내부 색만으로 도형이 표현됩니다.

## **프로세싱 프로그래밍의 기본 구조**

1. setup() 함수: 프로그램 초기 설정 및 준비 단계를 처리하는 함수.
    - 프로그램 실행 시 한 번만 실행된다.
    - 화면 크기 설정 등 초기화 작업 수행한다.
2. draw() 함수: 그림 그리기 및 반복적인 작업을 처리하는 함수.
    - 프로그램 실행 후 계속해서 반복 실행된다.
    - 주로 그림 그리기, 반복 작업 등을 수행한다.
3. 프로그램 실행 흐름:
    - setup() 함수는 프로그램 시작 시 한 번 실행되며, 초기화 작업을 수행한다.
    - draw() 함수는 프로그램이 실행되는 동안 반복해서 실행되며, 그림 그리기와 반복 작업을 처리한다.
4. 반복 작업:
    - 그림을 그리거나 반복 작업을 처리할 때는 draw() 함수 내부에 코드를 작성한다.
    - 필요한 경우 반복 작업을 처리하는 코드를 중괄호 {}로 묶어서 구분한.
